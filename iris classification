{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ddfd5c56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9778\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Load the Iris dataset\n",
    "data = pd.read_csv(\"iris.csv\")\n",
    "\n",
    "# Separate features and target variable\n",
    "features = data[[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"]]\n",
    "target = data[\"species\"]\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "features_scaled = scaler.fit_transform(features)\n",
    "\n",
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(features_scaled, target, test_size=0.3, random_state=0)\n",
    "\n",
    "# Create an SVM classifier object\n",
    "svm = SVC(kernel=\"rbf\", C=1.0)\n",
    "\n",
    "# Train the model\n",
    "svm.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the test set\n",
    "y_pred = svm.predict(X_test)\n",
    "# Evaluate the model accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy:.4f}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ee6136e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted species: setosa\n"
     ]
    }
   ],
   "source": [
    "# Add the following code to the existing SVM code:\n",
    "def predict_new_data(sepal_length, sepal_width, petal_length, petal_width):\n",
    "\n",
    "  # Create a new data point\n",
    "  new_data = pd.DataFrame({\n",
    "    \"sepal_length\": [sepal_length],\n",
    "    \"sepal_width\": [sepal_width],\n",
    "    \"petal_length\": [petal_length],\n",
    "    \"petal_width\": [petal_width],\n",
    "  })\n",
    "\n",
    "  # Standardize the new data\n",
    "  new_data_scaled = scaler.transform(new_data)\n",
    "\n",
    "  # Make predictions on the new data\n",
    "  predicted_species = svm.predict(new_data_scaled)[0]\n",
    "\n",
    "  return predicted_species\n",
    "\n",
    "# Example usage\n",
    "predicted_species = predict_new_data(5.2, 3.5, 1.4, 0.2)\n",
    "print(f\"Predicted species: {predicted_species}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c717cd8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bc610c7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "accf85bd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "463a054d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
